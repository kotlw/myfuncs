import io
from _typeshed import Incomplete
from cloudevents.http.event import CloudEvent
from functions_framework import event_conversion as event_conversion, execution_id as execution_id
from functions_framework.background_event import BackgroundEvent as BackgroundEvent
from functions_framework.exceptions import EventConversionException as EventConversionException, FunctionsFrameworkException as FunctionsFrameworkException, MissingSourceException as MissingSourceException
from inspect import signature as signature
from typing import Callable

CloudEventFunction = Callable[[CloudEvent], None]
HTTPFunction: Incomplete

class _LoggingHandler(io.TextIOWrapper):
    level: Incomplete
    stderr: Incomplete
    def __init__(self, level, stderr=...) -> None: ...
    def write(self, out): ...

def cloud_event(func: CloudEventFunction) -> CloudEventFunction: ...
def typed(*args): ...
def http(func: HTTPFunction) -> HTTPFunction: ...
def setup_logging(): ...
def read_request(response): ...
def crash_handler(e): ...
def create_app(target: Incomplete | None = None, source: Incomplete | None = None, signature_type: Incomplete | None = None): ...

class LazyWSGIApp:
    target: Incomplete
    source: Incomplete
    signature_type: Incomplete
    app: Incomplete
    def __init__(self, target: Incomplete | None = None, source: Incomplete | None = None, signature_type: Incomplete | None = None) -> None: ...
    def __call__(self, *args, **kwargs): ...

app: Incomplete

class DummyErrorHandler:
    def __init__(self) -> None: ...
    def __call__(self, *args, **kwargs): ...

errorhandler: Incomplete
